#!/usr/bin/env ruby

require 'optparse'

require_relative '../lib/backup_engine/backup_client/engine.rb'
require_relative '../lib/backup_engine/config/backup_config.rb'
require_relative '../lib/backup_engine/docker_bind_pathname.rb'
require_relative '../lib/backup_engine/manifest.rb'

def parse_args
  options = {}
  OptionParser.new do |opts|
    opts.banner = 'Usage: backup.rb [options]'

    opts.on('-v', '--[no-]verbose', 'Run verbosely') do |v|
      options[:verbose] = v
    end

    opts.on('-f FILE', '--configfile FILE', 'Specify configuration File') do |f|
      options[:config_file] = f
    end

    opts.on('-p PATH', '--path PATH', 'Backup only specified path. Manifest will be incomplete, intended for block seeding.') do |p|
      options[:path] = p
    end

    opts.on('--no-manifest', 'Disable saving the manifest') do |m|
      options[:no_manifest] = m
    end

    opts.on('--[no-]partial-manifest', 'Enable/disable saving of partial manifests') do |m|
      options[:partial_manifest] = m
    end
  end.parse!

  raise('--configfile flag is required') unless options.key?(:config_file)

  return options
end

def main
  options = parse_args

  config = BackupEngine::Config::BackupConfig.new(path: options[:config_file])
  config.logger.level = Logger::DEBUG if options[:verbose]

  backup_engine = BackupEngine::BackupClient::Engine.new(config.to_engine_hash)

  config.manifest.partial = true
  begin
    if options[:path]
      # Overridden paths are partial manifests
      # This code path is intended to seed blocks on sensitive paths, not create full backups
      config.logger.warn('Overriding config path per command line flags')
      backup_engine.backup_path(path: BackupEngine::DockerBindPathname.new(bind_path: config.docker_host_bind_path, relative_path: options[:path]))
    else
      config.paths.each do |path|
        backup_engine.backup_path(path: BackupEngine::DockerBindPathname.new(bind_path: config.docker_host_bind_path, relative_path: path))
      end
      config.manifest.partial = false
    end
  ensure
    if (!config.manifest.partial || options[:partial_manifest]) && !options[:no_manifest]
      config.manifest.upload(checksum_engine: config.checksum_engine,
                             encryption_engine: config.manifest_encryption_engine,
                             compression_engine: config.compression_engine)
    else
      config.logger.warn('Not uploading manifest')
    end
  end
end

main
