#!/usr/bin/env ruby

require 'logger'
require 'optparse'

require_relative '../lib/backup_engine/docker_bind_pathname.rb'
require_relative '../lib/backup_engine/config/backup_config.rb'
require_relative '../lib/backup_engine/backup_client/engine.rb'

def parse_args
  options = {}
  OptionParser.new do |opts|
    opts.banner = 'Usage: backup.rb [options]'

    opts.on('-v', '--[no-]verbose', 'Run verbosely') do |v|
      options[:verbose] = v
    end

    opts.on('-f FILE', '--configfile FILE', 'Specify configuration File') do |f|
      options[:config_file] = f
    end

    opts.on('-p PATH', '--path PATH', 'Backup only specified path') do |p|
      options[:path] = p
    end

    opts.on('--no-manifest', 'Disable saving the manifest') do |m|
      options[:no_manifest] = m
    end

    opts.on('--[no-]partial-manifest', 'Enable/disable saving of partial manifests') do |m|
      options[:partial_manifest] = m
    end
  end.parse!

  raise('--configfile flag is required') unless options.key?(:config_file)

  return options
end

def main
  options = parse_args

  logger = Logger.new(STDOUT)
  logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO

  config = BackupEngine::Config::BackupConfig.new(path: options[:config_file], logger: logger)

  backup_engine = BackupEngine::BackupClient::Engine.new(config.to_engine_hash)

  partial_manifest = false
  begin
    if options[:path]
      partial_manifest = true
      logger.warn('Overriding config path per command line flags')
      backup_engine.backup_path(path: BackupEngine::DockerBindPathname.new(bind_path: config.docker_host_bind_path, relative_path: options[:path]))
    else
      config.paths.each do |path|
        backup_engine.backup_path(path: BackupEngine::DockerBindPathname.new(bind_path: config.docker_host_bind_path, relative_path: path))
      end
    end
  ensure
    if (!partial_manifest || options[:partial_manifest]) && !options[:no_manifest]
      backup_engine.upload_manifest(partial: partial_manifest)
    else
      logger.warn('Not uploading manifest')
    end
  end
end

main
